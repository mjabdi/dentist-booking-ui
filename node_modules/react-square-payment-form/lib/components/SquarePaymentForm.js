"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = __importStar(require("react"));
var useDynamicCallback_1 = __importDefault(require("../hooks/useDynamicCallback"));
var Context_1 = __importDefault(require("./Context"));
exports.SquarePaymentForm = function (props) {
    var _a = react_1.useState('loading'), applePayState = _a[0], setApplePayState = _a[1];
    var _b = react_1.useState('loading'), googlePayState = _b[0], setGooglePayState = _b[1];
    var _c = react_1.useState('loading'), masterpassState = _c[0], setMasterpassState = _c[1];
    var _d = react_1.useState(''), errorMessage = _d[0], setErrorMessage = _d[1];
    var _e = react_1.useState(false), scriptLoaded = _e[0], setScriptLoaded = _e[1];
    var _f = react_1.useState(undefined), paymentForm = _f[0], setPaymentForm = _f[1];
    var _g = react_1.useState(false), formLoaded = _g[0], setFormLoaded = _g[1];
    function cardNonceResponseReceived(errors, nonce, cardData, billingContact, shippingContact, shippingOption) {
        if (errors || !props.createVerificationDetails) {
            props.cardNonceResponseReceived(errors, nonce, cardData, '', billingContact, shippingContact, shippingOption);
            return;
        }
        paymentForm &&
            paymentForm.verifyBuyer(nonce, props.createVerificationDetails(), function (err, result) {
                props.cardNonceResponseReceived(err ? [err] : null, nonce, cardData, result ? result.token : undefined, billingContact, shippingContact, shippingOption);
            });
    }
    var cardNonceResponseReceivedCallback = useDynamicCallback_1.default(cardNonceResponseReceived);
    function createNonce() {
        paymentForm && paymentForm.requestCardNonce();
    }
    function verifyBuyer(source, verificationDetails, callback) {
        paymentForm && paymentForm.verifyBuyer(source, verificationDetails, callback);
    }
    function methodsSupported(methods) {
        var keys = Object.keys(methods);
        if (keys.includes('masterpass')) {
            setMasterpassState(methods.masterpass === true ? 'ready' : 'unavailable');
        }
        if (keys.includes('applePay')) {
            setApplePayState(methods.applePay === true ? 'ready' : 'unavailable');
        }
        if (keys.includes('googlePay')) {
            setGooglePayState(methods.googlePay === true ? 'ready' : 'unavailable');
        }
        props.methodsSupported && props.methodsSupported(methods);
    }
    var paymentFormLoaded = function () {
        setFormLoaded(true);
        props.paymentFormLoaded && props.paymentFormLoaded();
    };
    function loadSqPaymentFormLibrary(onSuccess, onError) {
        if (document.getElementById('sq-payment-form-script') && typeof SqPaymentForm === 'function') {
            onSuccess && onSuccess();
            return;
        }
        var script = document.createElement('script');
        script.id = 'sq-payment-form-script';
        if (props.sandbox) {
            script.src = 'https://js.squareupsandbox.com/v2/paymentform';
        }
        else {
            script.src = 'https://js.squareup.com/v2/paymentform';
        }
        script.onload = function () {
            onSuccess && onSuccess();
        };
        script.onerror = function () {
            onError && onError();
        };
        document.body.appendChild(script);
    }
    function buildSqPaymentFormConfiguration(props) {
        var config = {
            apiWrapper: props.apiWrapper,
            applicationId: props.applicationId,
            autoBuild: false,
            callbacks: {
                cardNonceResponseReceived: props.cardNonceResponseReceived ? cardNonceResponseReceivedCallback : null,
                createPaymentRequest: props.createPaymentRequest,
                inputEventReceived: props.inputEventReceived,
                methodsSupported: methodsSupported,
                paymentFormLoaded: paymentFormLoaded,
                shippingContactChanged: props.shippingContactChanged,
                shippingOptionChanged: props.shippingOptionChanged,
                unsupportedBrowserDetected: props.unsupportedBrowserDetected,
            },
            locationId: props.locationId,
        };
        if (document.getElementById(props.formId + "-sq-card")) {
            config.card = {
                elementId: props.formId + "-sq-card",
                inputStyle: props.inputStyles && props.inputStyles[0],
            };
        }
        else if (document.getElementById(props.formId + "-sq-gift-card")) {
            config.giftCard = {
                elementId: props.formId + "-sq-gift-card",
                placeholder: props.placeholderGiftCard || '• • • •  • • • •  • • • •  • • • •',
            };
            config.inputClass = props.inputClass || 'sq-input';
            config.inputStyles = props.inputStyles;
        }
        else {
            config.inputClass = props.inputClass || 'sq-input';
            config.inputStyles = props.inputStyles;
            if (document.getElementById(props.formId + "-sq-apple-pay")) {
                config.applePay = { elementId: props.formId + "-sq-apple-pay" };
            }
            if (document.getElementById(props.formId + "-sq-google-pay")) {
                config.googlePay = { elementId: props.formId + "-sq-google-pay" };
            }
            if (document.getElementById(props.formId + "-sq-masterpass")) {
                config.masterpass = { elementId: props.formId + "-sq-masterpass" };
            }
            if (document.getElementById(props.formId + "-sq-card-number")) {
                config.cardNumber = {
                    elementId: props.formId + "-sq-card-number",
                    placeholder: props.placeholderCreditCard || '• • • •  • • • •  • • • •  • • • •',
                };
            }
            if (document.getElementById(props.formId + "-sq-cvv")) {
                config.cvv = { elementId: props.formId + "-sq-cvv", placeholder: props.placeholderCVV || 'CVV ' };
            }
            if (document.getElementById(props.formId + "-sq-postal-code")) {
                config.postalCode = {
                    elementId: props.formId + "-sq-postal-code",
                    placeholder: props.placeholderPostal || '12345',
                };
            }
            else {
                config.postalCode = false;
            }
            if (document.getElementById(props.formId + "-sq-expiration-date")) {
                config.expirationDate = {
                    elementId: props.formId + "-sq-expiration-date",
                    placeholder: props.placeholderExpiration || 'MM/YY',
                };
            }
        }
        return config;
    }
    function renderSqPaymentForm() {
        if (!scriptLoaded || paymentForm || errorMessage.length > 0) {
            return;
        }
        try {
            var newPaymentForm = new SqPaymentForm(buildSqPaymentFormConfiguration(props));
            newPaymentForm.build();
            setPaymentForm(newPaymentForm);
        }
        catch (error) {
            var errorMesasge = error.message || 'Unable to build Square payment form';
            setErrorMessage(errorMesasge);
        }
    }
    react_1.useEffect(function () {
        if (!formLoaded || !paymentForm) {
            return;
        }
        paymentForm.recalculateSize();
        props.postalCode && paymentForm.setPostalCode(props.postalCode());
        props.focusField && paymentForm.focus(props.focusField());
    }, [formLoaded, paymentForm]);
    react_1.useEffect(function () {
        loadSqPaymentFormLibrary(function () { return setScriptLoaded(true); }, function () { return setErrorMessage('Unable to load Square payment library'); });
    }, []);
    react_1.useEffect(function () {
        renderSqPaymentForm();
        return function () {
            if (paymentForm) {
                paymentForm.destroy();
                setPaymentForm(undefined);
            }
        };
    }, [scriptLoaded]);
    react_1.useEffect(function () {
        if (!paymentForm || masterpassState !== 'ready') {
            return;
        }
        var srcBtn = document.getElementById(props.formId + "-sq-masterpass");
        if (!srcBtn) {
            return;
        }
        var imageUrl = paymentForm.masterpassImageUrl();
        srcBtn.style.display = 'inline-block';
        srcBtn.style.backgroundImage = "url(" + imageUrl + ")";
    }, [paymentForm, masterpassState]);
    if (errorMessage) {
        return (react_1.default.createElement("div", { className: "sq-payment-form" },
            react_1.default.createElement("div", { className: "sq-error-message" }, errorMessage)));
    }
    var context = {
        applePayState: applePayState,
        formId: props.formId,
        googlePayState: googlePayState,
        masterpassState: masterpassState,
        onCreateNonce: createNonce,
        onVerifyBuyer: verifyBuyer,
    };
    return (react_1.default.createElement(Context_1.default.Provider, { value: context },
        react_1.default.createElement("div", { id: props.formId, className: "sq-payment-form" }, props.children)));
};
exports.SquarePaymentForm.defaultProps = {
    apiWrapper: 'reactjs/0.7.2',
    formId: 'sq-payment-form',
    inputStyles: [
        {
            _mozOsxFontSmoothing: 'grayscale',
            _webkitFontSmoothing: 'antialiased',
            backgroundColor: 'transparent',
            color: '#373F4A',
            fontFamily: 'Helvetica Neue',
            fontSize: '16px',
            lineHeight: '24px',
            padding: '16px',
            placeholderColor: '#CCC',
        },
    ],
    sandbox: false,
};
//# sourceMappingURL=SquarePaymentForm.js.map