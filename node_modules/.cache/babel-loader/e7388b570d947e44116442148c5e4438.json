{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mohammad/MyProjects/dentist-booking-ui/src/DateForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { DatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport GlobalState from './GlobalState';\nimport { BrowserView, MobileView } from 'react-device-detect';\nimport TimeService from './services/TimeService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport PhoneIcon from '@material-ui/icons/Phone';\nimport { format, addMinutes, isWeekend, getDay } from 'date-fns';\nimport { enGB } from 'date-fns/locale';\nimport dateformat from 'dateformat';\n\nclass UTCUtils extends DateFnsUtils {\n  constructor(...args) {\n    super(...args);\n    this.locale = enGB;\n  } // format(date, formatString) {\n  //   return format(new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000 ), formatString,enGB);\n  // }\n  // getCalendarHeaderText(date){\n  //   return dateformat(date, 'mmmm yyyy');\n  // }\n  // getDayText(date)\n  // {\n  //   return dateformat(date, 'd');\n  // }\n\n\n}\n\nconst useStyles = makeStyles(theme => ({\n  loadingBox: {},\n  pageTitle: {\n    color: theme.palette.primary.main,\n    marginBottom: \"15px\"\n  }\n}));\nexport default function DateForm() {\n  _s();\n\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  const [firstAvailableDay, setFirstAvailableDay] = React.useState(null);\n  const [fullyBookedDays, setFullyBookedDays] = React.useState(null);\n  const [bookingDate, setBookingDate] = React.useState(state.bookingDate);\n  const [dataLoaded, setDataLoaded] = React.useState(false);\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const LoadData = () => {\n    const promise1 = TimeService.getFirstAvailableDate();\n    const promise2 = TimeService.getFullyBookedDates();\n    Promise.all([promise1, promise2]).then(values => {\n      let firstday = new Date(values[0].data.date);\n      firstday.setHours(0, 0, 0, 0);\n      firstday = new Date(firstday.getTime() - firstday.getTimezoneOffset() * 60 * 1000);\n      setFirstAvailableDay(firstday);\n\n      if (!state.bookingDate) {\n        dateChanged(firstday);\n      }\n\n      setFullyBookedDays(values[1].data);\n      setDataLoaded(true);\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n\n  useEffect(() => {\n    LoadData();\n  }, []);\n\n  const dateChanged = date => {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0); // const offset = parseInt(date.getTimezoneOffset());\n    // console.log(offset);\n\n    date = new Date(date.getTime() - date.getTimezoneOffset() * 60 * 1000); // date = new Date(date.getFullYear(), date.getMonth(), date.getDate(),0,0,0,0);\n    // date = format(date, 'yyyy-MM-dd HH:mm:ss zzz', { timeZone: 'Europe/London' }) ; // 2014-10-25 10:46:20 GMT 00\n    // date = toDate(date);\n\n    console.log(date);\n    setBookingDate(date);\n    setState(state => ({ ...state,\n      bookingDate: date\n    }));\n  };\n\n  const checkFullyBooked = date => {\n    var result = false; // if (isWeekend(date))\n    //   return true\n    // console.log(getDay(date))\n\n    if (getDay(date) === 0 || getDay(date) === 1 || getDay(date) === 4 || getDay(date) === 6) return true; // if (dateformat(date, 'yyyy-mm-dd') < dateformat(firstAvailableDay, 'yyyy-mm-dd')) {\n    //   return true;\n    // }\n    else if (fullyBookedDays && fullyBookedDays.length > 0) {\n        for (var i = 0; i < fullyBookedDays.length; i++) {\n          if (dateformat(new Date(fullyBookedDays[i]), 'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) {\n            result = true;\n          }\n        }\n\n        return result;\n      } else {\n        return false;\n      }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      className: classes.pageTitle,\n      children: \"Pick a Date\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this), dataLoaded && firstAvailableDay ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(BrowserView, {\n          children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n            utils: UTCUtils,\n            locale: enGB,\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              autoOk: true,\n              disablePast: true,\n              openTo: \"date\",\n              orientation: \"landscape\",\n              variant: \"static\",\n              fullWidth: true,\n              value: bookingDate,\n              onChange: dateChanged,\n              shouldDisableDate: checkFullyBooked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 183,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(MobileView, {\n          children: /*#__PURE__*/_jsxDEV(MuiPickersUtilsProvider, {\n            utils: UTCUtils,\n            locale: enGB,\n            children: /*#__PURE__*/_jsxDEV(DatePicker, {\n              autoOk: true,\n              disablePast: true,\n              openTo: \"date\",\n              variant: \"static\",\n              fullWidth: true,\n              value: bookingDate,\n              onChange: dateChanged,\n              shouldDisableDate: checkFullyBooked\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"column\",\n        justify: \"center\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Skeleton, {\n          variant: \"text\",\n          width: '80%'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n          variant: \"text\",\n          width: '80%'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Skeleton, {\n          variant: \"rect\",\n          width: '80%',\n          height: 220\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n}\n\n_s(DateForm, \"PgWuresZla3UtIPi1lp3G1j5BtA=\", false, function () {\n  return [useStyles];\n});\n\n_c = DateForm;\n\nfunction EquallDates(date1, date2) {\n  return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n}\n\n_c2 = EquallDates;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"DateForm\");\n$RefreshReg$(_c2, \"EquallDates\");","map":{"version":3,"sources":["/Users/mohammad/MyProjects/dentist-booking-ui/src/DateForm.js"],"names":["React","useEffect","Typography","DatePicker","MuiPickersUtilsProvider","DateFnsUtils","GlobalState","BrowserView","MobileView","TimeService","makeStyles","Grid","Skeleton","PhoneIcon","format","addMinutes","isWeekend","getDay","enGB","dateformat","UTCUtils","locale","useStyles","theme","loadingBox","pageTitle","color","palette","primary","main","marginBottom","DateForm","classes","state","setState","useContext","firstAvailableDay","setFirstAvailableDay","useState","fullyBookedDays","setFullyBookedDays","bookingDate","setBookingDate","dataLoaded","setDataLoaded","window","scrollTo","LoadData","promise1","getFirstAvailableDate","promise2","getFullyBookedDates","Promise","all","then","values","firstday","Date","data","date","setHours","getTime","getTimezoneOffset","dateChanged","catch","err","console","log","getFullYear","getMonth","getDate","checkFullyBooked","result","length","i","EquallDates","date1","date2"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport {\n  DatePicker,\n  MuiPickersUtilsProvider,\n} from '@material-ui/pickers';\n\nimport DateFnsUtils from '@date-io/date-fns';\n\nimport GlobalState from './GlobalState';\nimport { BrowserView, MobileView } from 'react-device-detect';\n\nimport TimeService from './services/TimeService';\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport PhoneIcon from '@material-ui/icons/Phone';\n\n\n\nimport { format, addMinutes, isWeekend, getDay } from 'date-fns';\n\n\nimport { enGB, } from 'date-fns/locale'\n\n\nimport dateformat from 'dateformat';\n\nclass UTCUtils extends DateFnsUtils {\n\n  locale = enGB;\n  // format(date, formatString) {\n  //   return format(new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000 ), formatString,enGB);\n  // }\n\n  // getCalendarHeaderText(date){\n  //   return dateformat(date, 'mmmm yyyy');\n  // }\n\n  // getDayText(date)\n  // {\n  //   return dateformat(date, 'd');\n  // }\n\n\n\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  loadingBox: {\n\n  },\n\n  pageTitle: {\n    color: theme.palette.primary.main,\n    marginBottom: \"15px\"\n  }\n\n}));\n\n\n\n\nexport default function DateForm() {\n  const classes = useStyles();\n\n  const [state, setState] = React.useContext(GlobalState);\n\n  const [firstAvailableDay, setFirstAvailableDay] = React.useState(null);\n  const [fullyBookedDays, setFullyBookedDays] = React.useState(null);\n\n  const [bookingDate, setBookingDate] = React.useState(state.bookingDate);\n\n\n  const [dataLoaded, setDataLoaded] = React.useState(false);\n\n  useEffect(() => {\n    window.scrollTo(0, 0)\n  }, []);\n\n  const LoadData = () => {\n\n    const promise1 = TimeService.getFirstAvailableDate();\n    const promise2 = TimeService.getFullyBookedDates();\n\n    Promise.all([promise1, promise2]).then((values) => {\n      let firstday = new Date((values[0].data).date);\n      firstday.setHours(0, 0, 0, 0);\n\n      firstday = new Date(firstday.getTime() - firstday.getTimezoneOffset() * 60 * 1000);\n\n      setFirstAvailableDay(firstday);\n      if (!state.bookingDate) {\n        dateChanged(firstday);\n      }\n\n      setFullyBookedDays(values[1].data);\n\n      setDataLoaded(true);\n\n    }).catch((err) => {\n      console.log(err);\n    });\n  }\n\n\n\n  useEffect(() => {\n    LoadData();\n\n  }, []);\n\n\n\n  const dateChanged = (date) => {\n    date = new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0);\n    // const offset = parseInt(date.getTimezoneOffset());\n    // console.log(offset);\n\n    date = new Date(date.getTime() - (date.getTimezoneOffset() * 60 * 1000));\n    // date = new Date(date.getFullYear(), date.getMonth(), date.getDate(),0,0,0,0);\n\n    // date = format(date, 'yyyy-MM-dd HH:mm:ss zzz', { timeZone: 'Europe/London' }) ; // 2014-10-25 10:46:20 GMT 00\n    // date = toDate(date);\n    console.log(date);\n    setBookingDate(date);\n    setState(state => ({ ...state, bookingDate: date }));\n  }\n\n  const checkFullyBooked = (date) => {\n    var result = false;\n\n    // if (isWeekend(date))\n    //   return true\n\n    // console.log(getDay(date))\n\n    if (getDay(date) === 0 || getDay(date) === 1 || getDay(date) === 4 || getDay(date) === 6)\n      return true\n\n    // if (dateformat(date, 'yyyy-mm-dd') < dateformat(firstAvailableDay, 'yyyy-mm-dd')) {\n    //   return true;\n    // }\n\n    else if (fullyBookedDays && fullyBookedDays.length > 0) {\n      for (var i = 0; i < fullyBookedDays.length; i++) {\n        if (dateformat(new Date(fullyBookedDays[i]), 'yyyy-mm-dd') === dateformat(date, 'yyyy-mm-dd')) {\n          result = true;\n        }\n      }\n\n      return result;\n    }\n    else {\n      return false;\n    }\n  }\n\n  return (\n\n    <React.Fragment>\n\n      <Typography variant=\"h6\" gutterBottom className={classes.pageTitle}>\n        Pick a Date\n                </Typography>\n\n      {(dataLoaded && firstAvailableDay) ? (\n\n        <React.Fragment>\n\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n\n            <BrowserView>\n              <MuiPickersUtilsProvider utils={UTCUtils} locale={enGB}>\n                <DatePicker autoOk\n                  disablePast={true}\n                  openTo=\"date\"\n                  orientation=\"landscape\"\n                  variant=\"static\"\n                  fullWidth\n                  value={bookingDate}\n                  onChange={dateChanged}\n                  shouldDisableDate={checkFullyBooked}\n                />\n              </MuiPickersUtilsProvider>\n            </BrowserView>\n\n            <MobileView>\n              <MuiPickersUtilsProvider utils={UTCUtils} locale={enGB}>\n                <DatePicker autoOk\n                  disablePast={true}\n                  openTo=\"date\"\n                  variant=\"static\"\n                  fullWidth\n                  value={bookingDate}\n                  onChange={dateChanged}\n                  shouldDisableDate={checkFullyBooked}\n                />\n              </MuiPickersUtilsProvider>\n            </MobileView>\n          </Grid>\n\n        </React.Fragment>\n      )\n        :\n        (\n          <React.Fragment>\n            <Grid\n              container\n              direction=\"column\"\n              justify=\"center\"\n              alignItems=\"center\"\n            >\n\n              <Skeleton variant=\"text\" width={'80%'} />\n              <Skeleton variant=\"text\" width={'80%'} />\n              <Skeleton variant=\"rect\" width={'80%'} height={220} />\n\n            </Grid>\n          </React.Fragment>\n        )\n      }\n    </React.Fragment>\n  );\n}\n\n\n\n\n\nfunction EquallDates(date1, date2) {\n  return (\n    date1.getFullYear() === date2.getFullYear() &&\n    date1.getMonth() === date2.getMonth() &&\n    date1.getDate() === date2.getDate()\n  );\n}\n"]},"metadata":{},"sourceType":"module"}