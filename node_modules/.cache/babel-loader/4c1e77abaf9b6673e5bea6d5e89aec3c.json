{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mohammad/MyProjects/dentist-booking-ui/src/DateField.js\",\n    _s = $RefreshSig$();\n\nimport PropTypes from 'prop-types';\nimport React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport dateformat from 'dateformat';\nimport { FormControl, InputLabel, Select } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\nconst useStyles = makeStyles(theme => ({\n  loadingBox: {}\n}));\n\nconst DateField = ({\n  title,\n  value,\n  dateChanged,\n  error\n}) => {\n  _s();\n\n  const [day, setDay] = React.useState('');\n  const [month, setMonth] = React.useState('');\n  const [year, setYear] = React.useState('');\n  const [dayArray, setDayArray] = React.useState([]);\n  const [monthArray, setMonthArray] = React.useState([]);\n  const [yearArray, setYearArray] = React.useState([]);\n\n  const updateDate = (dd, mm, yyyy) => {\n    let dayStr = `${dd}`;\n    let monthStr = `${mm + 1}`;\n\n    if (dayStr.length === 1) {\n      dayStr = `0${dayStr}`;\n    }\n\n    if (monthStr.length === 1) {\n      monthStr = `0${monthStr}`;\n    }\n\n    dateChanged(`${yyyy}-${monthStr}-${dayStr}`);\n  };\n\n  const handleDayChanged = event => {\n    setDay(event.target.value);\n    updateDate(event.target.value, month, year);\n  };\n\n  const handleMonthChanged = event => {\n    setMonth(event.target.value);\n    updateDate(day, event.target.value, year);\n  };\n\n  const handleYearChanged = event => {\n    setYear(event.target.value);\n    updateDate(day, month, event.target.value);\n  };\n\n  useEffect(() => {\n    if (value && value.length === 10) {\n      const d = parseInt(value.substr(8, 2));\n      const m = parseInt(value.substr(5, 2));\n      const y = parseInt(value.substr(0, 4));\n      setDay(d);\n      setMonth(m - 1);\n      setYear(y);\n    }\n  }, [value]);\n  useEffect(() => {\n    const days = [];\n    const months = [];\n    const years = [];\n\n    for (var i = 1; i <= 31; i++) {\n      days.push(i);\n    }\n\n    for (i = 0; i < 12; i++) {\n      months.push(dateformat(new Date(2020, i, 5), 'mmmm'));\n    }\n\n    for (i = 1900; i < new Date().getFullYear(); i++) {\n      years.push(i);\n    }\n\n    setDayArray(days);\n    setMonthArray(months);\n    setYearArray(years);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        border: `1px solid ${error ? 'red' : '#ddd'}`,\n        borderRadius: \"10px\",\n        padding: \"20px\",\n        paddingBottom: \"50px\",\n        marginTop: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          top: \"-15px\",\n          left: \"15px\",\n          backgroundColor: \"#fff\",\n          color: `${error ? 'red' : '#555'}`,\n          padding: \"5px\",\n          paddingLeft: \"10px\",\n          paddingRight: \"10px\"\n        },\n        children: [title, \" *\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        direction: \"row\",\n        justify: \"flex-start\",\n        alignItems: \"flex-start\",\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"day-label\",\n              children: \"Day\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"day-label\",\n              id: \"day-select\",\n              value: day,\n              onChange: handleDayChanged,\n              children: dayArray.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item,\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"month-label\",\n              children: \"Month\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 164,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"month-label\",\n              id: \"month-select\",\n              value: month,\n              onChange: handleMonthChanged,\n              children: monthArray.map((item, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: index,\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 173,\n                columnNumber: 33\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 165,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 12,\n          md: 4,\n          children: /*#__PURE__*/_jsxDEV(FormControl, {\n            fullWidth: true,\n            children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n              id: \"day-label\",\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 184,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(Select, {\n              labelId: \"year-label\",\n              id: \"year-select\",\n              value: year,\n              onChange: handleYearChanged,\n              children: yearArray.map(item => /*#__PURE__*/_jsxDEV(MenuItem, {\n                value: item,\n                children: item\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 29\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 21\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DateField, \"Yunug+OXx56sEowVP3o57rKxMt0=\");\n\n_c = DateField;\nDateField.propTypes = {\n  title: PropTypes.string.isRequired,\n  value: PropTypes.string.isRequired,\n  dateChanged: PropTypes.func.isRequired,\n  error: PropTypes.bool\n};\nexport default DateField;\n\nvar _c;\n\n$RefreshReg$(_c, \"DateField\");","map":{"version":3,"sources":["/Users/mohammad/MyProjects/dentist-booking-ui/src/DateField.js"],"names":["PropTypes","React","useEffect","Typography","makeStyles","Grid","dateformat","FormControl","InputLabel","Select","MenuItem","useStyles","theme","loadingBox","DateField","title","value","dateChanged","error","day","setDay","useState","month","setMonth","year","setYear","dayArray","setDayArray","monthArray","setMonthArray","yearArray","setYearArray","updateDate","dd","mm","yyyy","dayStr","monthStr","length","handleDayChanged","event","target","handleMonthChanged","handleYearChanged","d","parseInt","substr","m","y","days","months","years","i","push","Date","getFullYear","position","border","borderRadius","padding","paddingBottom","marginTop","top","left","backgroundColor","color","paddingLeft","paddingRight","map","item","index","propTypes","string","isRequired","func","bool"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\n\n\nimport React, { useEffect } from 'react';\nimport Typography from '@material-ui/core/Typography';\n\n\nimport { makeStyles } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\n\n\nimport dateformat from 'dateformat';\nimport { FormControl, InputLabel, Select } from '@material-ui/core';\nimport MenuItem from '@material-ui/core/MenuItem';\n\n\n\n\nconst useStyles = makeStyles((theme) => ({\n\n  loadingBox: {\n    \n  }\n\n}));\n\n\nconst DateField = ({title, value, dateChanged, error}) => {\n\n    const [day, setDay] = React.useState('');\n    const [month, setMonth] = React.useState('');\n    const [year, setYear] = React.useState('');\n\n    const [dayArray, setDayArray] = React.useState([]);\n    const [monthArray, setMonthArray] = React.useState([]);\n    const [yearArray, setYearArray] = React.useState([]);\n\n        const updateDate = (dd,mm,yyyy) =>\n        {\n            let dayStr = `${dd}`;\n            let monthStr = `${mm + 1}`;\n            \n\n            if (dayStr.length === 1)\n            {\n                dayStr = `0${dayStr}`;\n            }\n\n            if (monthStr.length === 1)\n            {\n                monthStr = `0${monthStr}`;\n            }\n\n            dateChanged(`${yyyy}-${monthStr}-${dayStr}`);\n            \n\n        }\n\n        const handleDayChanged = (event) => {\n            setDay(event.target.value);\n            updateDate(event.target.value,month,year);\n        };\n\n        const handleMonthChanged = (event) => {\n            setMonth(event.target.value);\n            updateDate(day, event.target.value, year);\n        };\n\n        const handleYearChanged = (event) => {\n            setYear(event.target.value);\n            updateDate(day,month,event.target.value);\n        };\n\n        useEffect ( () => \n        {\n            if (value && value.length === 10)\n            {\n                const d = parseInt(value.substr(8,2));\n                const m = parseInt(value.substr(5,2));\n                const y = parseInt(value.substr(0,4));\n\n                setDay(d);\n                setMonth(m-1);\n                setYear(y);\n            }\n           \n\n        }, [value]);\n\n      useEffect( () => {\n\n        const days = [];\n        const months = [];\n        const years = [];\n\n\n        for (var i = 1 ; i <= 31; i++)\n        {\n            days.push(i);\n        }\n\n        for ( i = 0 ; i < 12; i++)\n        {\n            months.push(dateformat(new Date(2020,i,5), 'mmmm'));\n        }\n\n        for ( i = 1900 ; i < new Date().getFullYear(); i++)\n        {\n            years.push(i);\n        }\n\n       \n        setDayArray(days);\n        setMonthArray(months);\n        setYearArray(years);\n\n      } , [])\n    \n  return (\n\n    <React.Fragment>\n\n        \n    <div style={{position:\"relative\", border:`1px solid ${error ? 'red' : '#ddd'}` , borderRadius:\"10px\", padding:\"20px\", paddingBottom: \"50px\", marginTop: \"20px\"}}>\n\n        <div style={{position:\"absolute\", top: \"-15px\", left : \"15px\", backgroundColor:\"#fff\", color : `${error ? 'red' : '#555'}`, padding:\"5px\" , paddingLeft:\"10px\", paddingRight:\"10px\" }}>\n               {title} * \n       </div>\n\n    \n\n        <Grid\n            container\n            direction=\"row\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n            spacing={2}\n        >\n\n\n            <Grid item xs={12} md={4}>\n                <FormControl fullWidth>\n                    <InputLabel  id=\"day-label\">Day</InputLabel>\n                    <Select\n                        \n                        labelId=\"day-label\"\n                        id=\"day-select\"\n                        value={day}\n                        onChange={handleDayChanged}\n                        >\n                        {\n                            dayArray.map( item => (\n                                <MenuItem value={item}>{item}</MenuItem>\n                            )\n                        )} \n                    </Select>\n                </FormControl>\n\n\n            </Grid>\n\n            <Grid item xs={12} md={4}>\n                <FormControl fullWidth>\n                    <InputLabel  id=\"month-label\">Month</InputLabel>\n                    <Select\n                        labelId=\"month-label\"\n                        id=\"month-select\"\n                        value={month}\n                        onChange={handleMonthChanged}\n                        >\n                        {\n                            monthArray.map( (item , index) => (\n                                <MenuItem value={index}>{item}</MenuItem>\n                            )\n                        )} \n                    </Select>\n                </FormControl>\n\n                \n            </Grid>\n\n            <Grid item xs={12} md={4}>\n                <FormControl fullWidth>\n                    <InputLabel  id=\"day-label\">Year</InputLabel>\n                    <Select\n                    labelId=\"year-label\"\n                    id=\"year-select\"\n                    value={year}\n                    onChange={handleYearChanged}\n                    >\n                    {\n                        yearArray.map( item => (\n                            <MenuItem value={item}>{item}</MenuItem>\n                        )\n                    )} \n                    </Select>\n                </FormControl>\n            </Grid>\n        </Grid>\n\n        </div>\n    </React.Fragment>\n  );\n}\n\n\nDateField.propTypes = {\n    title : PropTypes.string.isRequired,\n    value: PropTypes.string.isRequired,\n    dateChanged: PropTypes.func.isRequired,\n    error: PropTypes.bool\n  };\n\nexport default DateField;\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}