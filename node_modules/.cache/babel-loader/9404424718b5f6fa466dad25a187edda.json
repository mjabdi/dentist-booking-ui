{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/mohammad/MyProjects/dentist-booking-ui/src/InformationForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport GlobalState from './GlobalState';\nimport * as EmailValidator from 'email-validator';\nimport { DatePicker, KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport PersonsBox from './PersonsBox';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\nimport AntiBodyComponent from './AntiBodyComponent';\nimport { format, addMinutes } from 'date-fns';\nimport dateformat from 'dateformat';\nimport { enGB } from 'date-fns/locale';\nimport DateField from './DateField';\n\nclass UTCUtils extends DateFnsUtils {\n  constructor(...args) {\n    super(...args);\n    this.locale = enGB;\n  } // format(date, formatString) {\n  //   return format(new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000 ), formatString,enGB);\n  // }\n  // getCalendarHeaderText(date){\n  //   return dateformat(date, 'mmmm yyyy');\n  // }\n  // getDayText(date)\n  // {\n  //   return dateformat(date, 'd');\n  // }\n\n\n}\n\nconst useStyles = makeStyles(theme => ({\n  formControl: {\n    textAlign: \"left\"\n  },\n  FormTitle: {\n    marginTop: \"20px\",\n    marginBottom: \"20px\"\n  },\n  Box: {\n    backgroundColor: \"#f1f1f1\",\n    padding: \"10px\",\n    //maxWidth: \"300px\",\n    borderRadius: \"10px\",\n    boxShadow: \"2px 4px #ddd\",\n    marginTop: \"5px\",\n    marginBottom: \"15px\",\n    textAlign: \"left\"\n  },\n  pageTitle: {\n    color: theme.palette.primary.main,\n    marginBottom: \"15px\"\n  }\n}));\nexport default function InformationForm() {\n  _s();\n\n  var _state$fullname, _state$email, _state$retypeEmail, _state$emailConfirmed, _state$phone;\n\n  const classes = useStyles();\n  const [state, setState] = React.useContext(GlobalState);\n  const [fullname, setFullname] = React.useState((_state$fullname = state.fullname) !== null && _state$fullname !== void 0 ? _state$fullname : '');\n  const [email, setEmail] = React.useState((_state$email = state.email) !== null && _state$email !== void 0 ? _state$email : '');\n  const [retypeEmail, setRetypeEmail] = React.useState((_state$retypeEmail = state.retypeEmail) !== null && _state$retypeEmail !== void 0 ? _state$retypeEmail : '');\n  const [emailConfirmed, setEmailConfirmed] = React.useState((_state$emailConfirmed = state.emailConfirmed) !== null && _state$emailConfirmed !== void 0 ? _state$emailConfirmed : false);\n  const [phone, setPhone] = React.useState((_state$phone = state.phone) !== null && _state$phone !== void 0 ? _state$phone : '');\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, []);\n\n  const emailConfirmedChanged = event => {\n    setEmailConfirmed(event.target.checked);\n    setState(state => ({ ...state,\n      emailConfirmed: event.target.checked\n    }));\n    setState(state => ({ ...state,\n      emailConfirmedError: false\n    }));\n  };\n\n  const fullnameChanged = event => {\n    setFullname(event.target.value);\n    setState(state => ({ ...state,\n      fullname: event.target.value\n    }));\n\n    if (event.target.value && event.target.value.trim().length > 0) {\n      setState(state => ({ ...state,\n        fullnameError: false\n      }));\n    }\n  };\n\n  const emailChanged = event => {\n    setEmail(event.target.value);\n    setRetypeEmail(event.target.value);\n    setState(state => ({ ...state,\n      email: event.target.value,\n      retypeEmail: event.target.value\n    }));\n\n    if (event.target.value && EmailValidator.validate(event.target.value)) {\n      setState(state => ({ ...state,\n        emailError: false\n      }));\n    }\n  };\n\n  const retypeEmailChanged = event => {\n    setRetypeEmail(event.target.value);\n    setState(state => ({ ...state,\n      retypeEmail: event.target.value\n    }));\n\n    if (event.target.value && EmailValidator.validate(event.target.value)) {\n      setState(state => ({ ...state,\n        retypeEmailError: false\n      }));\n    }\n  };\n\n  const phoneChanged = event => {\n    setPhone(event.target.value);\n    setState(state => ({ ...state,\n      phone: event.target.value\n    }));\n\n    if (event.target.value && event.target.value.trim().length >= 6) {\n      setState(state => ({ ...state,\n        phoneError: false\n      }));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h6\",\n      gutterBottom: true,\n      className: classes.pageTitle,\n      children: \"Enter your Info\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      spacing: 4,\n      alignItems: \"baseline\",\n      style: {\n        marginTop: \"10px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: state.fullnameError ? true : false,\n          required: true,\n          id: \"fullname\",\n          label: \"Full Name\",\n          fullWidth: true,\n          autoComplete: \"name\",\n          value: fullname,\n          onChange: fullnameChanged,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: state.phoneError ? true : false,\n          required: true,\n          id: \"phone\",\n          label: \"Phone Number\",\n          fullWidth: true,\n          autoComplete: \"tel\",\n          value: phone,\n          onChange: phoneChanged,\n          variant: \"outlined\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 173,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 12,\n        children: /*#__PURE__*/_jsxDEV(TextField, {\n          error: state.emailError ? true : false,\n          required: true,\n          id: \"email\",\n          label: \"Email Address\",\n          fullWidth: true,\n          autoComplete: \"email\",\n          type: \"email\",\n          value: email,\n          onChange: emailChanged,\n          variant: \"outlined\" // helperText = 'This email address is where you will receive your results. Please tick the box below to confirm that this is a private email address to which you are happy for us to send your results.'\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 14\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n\n_s(InformationForm, \"eKfD8gi2Q37T/SKVxv0SQfJai3E=\", false, function () {\n  return [useStyles];\n});\n\n_c = InformationForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"InformationForm\");","map":{"version":3,"sources":["/Users/mohammad/MyProjects/dentist-booking-ui/src/InformationForm.js"],"names":["React","useEffect","makeStyles","Typography","Grid","TextField","Select","MenuItem","InputLabel","FormControl","GlobalState","EmailValidator","DatePicker","KeyboardDatePicker","MuiPickersUtilsProvider","DateFnsUtils","PersonsBox","Checkbox","FormControlLabel","AntiBodyComponent","format","addMinutes","dateformat","enGB","DateField","UTCUtils","locale","useStyles","theme","formControl","textAlign","FormTitle","marginTop","marginBottom","Box","backgroundColor","padding","borderRadius","boxShadow","pageTitle","color","palette","primary","main","InformationForm","classes","state","setState","useContext","fullname","setFullname","useState","email","setEmail","retypeEmail","setRetypeEmail","emailConfirmed","setEmailConfirmed","phone","setPhone","window","scrollTo","emailConfirmedChanged","event","target","checked","emailConfirmedError","fullnameChanged","value","trim","length","fullnameError","emailChanged","validate","emailError","retypeEmailChanged","retypeEmailError","phoneChanged","phoneError"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport Grid from '@material-ui/core/Grid';\nimport TextField from '@material-ui/core/TextField';\n\nimport Select from '@material-ui/core/Select';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport InputLabel from '@material-ui/core/InputLabel';\n\nimport FormControl from '@material-ui/core/FormControl';\nimport GlobalState from './GlobalState';\nimport * as EmailValidator from 'email-validator';\n\nimport {\n    DatePicker,\n    KeyboardDatePicker,\n    MuiPickersUtilsProvider\n  } from '@material-ui/pickers';\nimport DateFnsUtils from '@date-io/date-fns';\nimport PersonsBox from './PersonsBox';\nimport { Checkbox, FormControlLabel } from '@material-ui/core';\nimport AntiBodyComponent from './AntiBodyComponent';\n\n\nimport { format, addMinutes } from 'date-fns';\n\n\nimport dateformat from 'dateformat';\nimport { enGB, } from 'date-fns/locale'\nimport DateField from './DateField';\n\nclass UTCUtils extends DateFnsUtils {\n \n  locale = enGB;\n  // format(date, formatString) {\n  //   return format(new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000 ), formatString,enGB);\n  // }\n\n  // getCalendarHeaderText(date){\n  //   return dateformat(date, 'mmmm yyyy');\n  // }\n\n  // getDayText(date)\n  // {\n  //   return dateformat(date, 'd');\n  // }\n\n}\n\nconst useStyles = makeStyles((theme) => ({\n    formControl: {\n      textAlign: \"left\"\n    },\n\n    FormTitle:\n    {\n      marginTop : \"20px\",\n      marginBottom : \"20px\",\n    },\n    Box:{\n      backgroundColor : \"#f1f1f1\",\n      padding: \"10px\",\n      //maxWidth: \"300px\",\n      borderRadius  : \"10px\",\n      boxShadow: \"2px 4px #ddd\",\n      marginTop: \"5px\",\n      marginBottom : \"15px\",\n      textAlign: \"left\"\n      \n    \n    },\n\n    pageTitle:{\n      color : theme.palette.primary.main,\n      marginBottom: \"15px\"\n    }\n\n  }));\n\nexport default function InformationForm() {\n    const classes = useStyles();\n    const [state, setState] = React.useContext(GlobalState);\n    const [fullname, setFullname] = React.useState(state.fullname ?? '');\n    const [email, setEmail] = React.useState(state.email ?? '');\n    const [retypeEmail, setRetypeEmail] = React.useState(state.retypeEmail ?? '');\n    const [emailConfirmed, setEmailConfirmed] = React.useState(state.emailConfirmed ?? false);\n\n    const [phone, setPhone] = React.useState(state.phone ?? '');\n    \n    \n   \n\n    useEffect(() => {\n      window.scrollTo(0, 0)\n    }, []);\n\n    const emailConfirmedChanged = (event) => {\n      setEmailConfirmed(event.target.checked);\n      setState(state => ({...state, emailConfirmed: event.target.checked}));\n      setState(state => ({...state, emailConfirmedError: false}));\n  };\n\n    const fullnameChanged = (event) =>\n    {\n        setFullname(event.target.value);\n        setState(state => ({...state, fullname : event.target.value }));\n        if (event.target.value && event.target.value.trim().length > 0)\n        {\n          setState(state => ({...state, fullnameError : false}));\n        }\n    }\n\n    const emailChanged = (event) =>\n    {\n        setEmail(event.target.value);\n        setRetypeEmail(event.target.value)\n        setState(state => ({...state, email : event.target.value, retypeEmail : event.target.value   }));\n        if (event.target.value && EmailValidator.validate(event.target.value))\n        {\n          setState(state => ({...state, emailError : false}));\n        }\n    }\n    \n    const retypeEmailChanged = (event) =>\n    {\n        setRetypeEmail(event.target.value);\n        setState(state => ({...state, retypeEmail : event.target.value }));\n        if (event.target.value && EmailValidator.validate(event.target.value))\n        {\n          setState(state => ({...state, retypeEmailError : false}));\n        }\n    }\n\n    const phoneChanged = (event) =>\n    {\n        setPhone(event.target.value);\n        setState(state => ({...state, phone : event.target.value }));\n        if (event.target.value && event.target.value.trim().length >= 6)\n        {\n          setState(state => ({...state, phoneError : false}));\n        } \n    }\n\n   \n\n  return (\n\n\n    <React.Fragment>\n\n\n          <Typography variant=\"h6\" gutterBottom className={classes.pageTitle}>\n              Enter your Info\n          </Typography>\n\n      \n   \n\n      <Grid container spacing={4} alignItems=\"baseline\" style={{marginTop:\"10px\"}}>\n\n        <Grid item xs={12}>\n          <TextField \n                    error={state.fullnameError ? true : false}\n                    required id=\"fullname\" label=\"Full Name\" \n                    fullWidth autoComplete=\"name\" \n                    value = {fullname}\n                    onChange = {fullnameChanged} \n                    variant=\"outlined\"\n          />\n        </Grid>\n        <Grid item xs={12}>\n             <TextField \n                        error={state.phoneError ? true : false}\n                        required id=\"phone\" label=\"Phone Number\" \n                        fullWidth autoComplete=\"tel\" \n                        value = {phone}\n                        onChange = {phoneChanged} \n                        variant=\"outlined\"\n\n             />  \n        </Grid>\n        <Grid item xs={12}>\n             <TextField\n                        error={state.emailError ? true : false}\n                        required id=\"email\" label=\"Email Address\" \n                        fullWidth autoComplete=\"email\"  type=\"email\"\n                        value = {email}\n                        onChange = {emailChanged} \n                        variant=\"outlined\"\n\n                       // helperText = 'This email address is where you will receive your results. Please tick the box below to confirm that this is a private email address to which you are happy for us to send your results.'\n             />  \n        </Grid>\n\n        {/* <Grid item xs={12} md={6}>\n             <TextField\n                        error={state.retypeEmailError ? true : false}\n                        required id=\"retypeEmail\" label=\"Retype Email Address\" \n                        fullWidth autoComplete=\"email\"  type=\"email\"\n                        value = {retypeEmail}\n                        onChange = {retypeEmailChanged} \n                        // helperText = 'This email address is where you will receive your results. Please tick the box below to confirm that this is a private email address to which you are happy for us to send your results.'\n             />  \n        </Grid> */}\n\n        {/* <Grid item xs={12} className={classes.formControl} >\n          <FormControlLabel className={classes.formControl}  style={ {color: state.emailConfirmedError ? \"red\" : ''}} \n            control={<Checkbox className={classes.formControl} style={ {color: state.emailConfirmedError ? \"red\" : ''}}  color=\"secondary\" name=\"emailConfirmCheckBox\" checked={emailConfirmed} onChange={emailConfirmedChanged} />}\n             label={<span style={{ fontSize: '0.8rem' }}>{`I confirm that this is a private email address to which I am happy for you to send my results.`} </span>}\n          />\n          <p>{'* Please take care when entering your information, and double check that everything entered on this form is correct.'}</p>\n        </Grid> */}\n\n      </Grid>\n    \n      \n    </React.Fragment>\n  );\n}\n\n"]},"metadata":{},"sourceType":"module"}